'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'

declare global {
  interface Window {
    Telegram: {
      WebApp: {
        initData: string
      }
    }
  }
}

export default function Home() {
  const [status, setStatus] = useState<'loading' | 'error' | 'dev'>('loading')
  const [errorMessage, setErrorMessage] = useState('')
  const router = useRouter()
  const isDevMode = process.env.NEXT_PUBLIC_DEV_MODE === 'true'

  useEffect(() => {
    const checkMembership = async () => {
      try {
        // Get initData from Telegram WebApp
        const initData = window.Telegram?.WebApp?.initData

        if (!initData) {
          if (isDevMode) {
            // In development mode, show test options instead of error
            setStatus('dev')
            return
          }
          setStatus('error')
          setErrorMessage('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
          return
        }

        // Call API to check membership
        const response = await fetch('/api/check', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ initData }),
        })

        if (!response.ok) {
          const errorData = await response.json()
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞')
        }

        const data = await response.json()

        // Navigate to redirect handler
        router.push(`/go?member=${data.member}`)
      } catch (error) {
        console.error('Error:', error)
        setStatus('error')
        setErrorMessage(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    }

    checkMembership()
  }, [router])

  if (status === 'dev') {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="text-center max-w-md">
          <div className="text-blue-600 text-lg font-semibold mb-4">
            –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          </div>
          <div className="text-gray-600 mb-6">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
          </div>
          <div className="space-y-3">
            <button
              onClick={() => router.push('/go?member=true')}
              className="w-full bg-green-600 text-white px-4 py-3 rounded hover:bg-green-700 transition-colors"
            >
              üü¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞
            </button>
            <button
              onClick={() => router.push('/go?member=false')}
              className="w-full bg-red-600 text-white px-4 py-3 rounded hover:bg-red-700 transition-colors"
            >
              üî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞
            </button>
          </div>
          <div className="mt-6 text-sm text-gray-500">
            –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NEXT_PUBLIC_DEV_MODE=true –≤ .env.local
          </div>
        </div>
      </div>
    )
  }

  if (status === 'error') {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="text-center">
          <div className="text-red-600 text-lg font-semibold mb-2">
            –û—à–∏–±–∫–∞
          </div>
          <div className="text-gray-600">
            {errorMessage}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="text-center">
        <div className="text-gray-600 text-lg mb-2">
          –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø‚Ä¶
        </div>
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
      </div>
    </div>
  )
}
